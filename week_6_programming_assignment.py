from IPython import embed
import gmpy2
from gmpy2 import mpz


def part1():
    N = mpz('179769313486231590772930519078902473361797697894230657273430081157732675805505620686985379449212982959585501387537164015710139858647833778606925583497541085196591615128057575940752635007475935288710823649949940771895617054361149474865046711015101563940680527540071584560878577663743040086340742855278549092581')
    A = gmpy2.isqrt(N) + 1
    assert((A-1)**2 < N)
    assert(A**2 > N)
    x, rem = gmpy2.isqrt_rem(A**2-N)
    assert(rem == 0)
    p = A-x
    q = A+x
    assert(p*q == N)
    print("the smaller factor is {}".format(p))


def part2():
    N = mpz('648455842808071669662824265346772278726343720706976263060439070378797308618081116462714015276061417569195587321840254520655424906719892428844841839353281972988531310511738648965962582821502504990264452100885281673303711142296421027840289307657458645233683357077834689715838646088239640236866252211790085787877')
    A_orig = gmpy2.isqrt(N)
    A = A_orig
    while True:
        A += 1
        x, rem = gmpy2.isqrt_rem(A**2-N)
        if rem != 0:
            continue
        p = A-x
        q = A+x
        if p*q != N:
            continue
        break
    print("the smaller factor is {}".format(p))


def part3():
    N = mpz('720062263747350425279564435525583738338084451473999841826653057981916355690188337790423408664187663938485175264994017897083524079135686877441155132015188279331812309091996246361896836573643119174094961348524639707885238799396839230364676670221627018353299443241192173812729276147530748597302192751375739387929')
    A = gmpy2.isqrt(24*N) + 1
    x, rem = gmpy2.isqrt_rem(A**2-24*N)
    assert(rem == 0)
    p, rem = gmpy2.t_divmod(A-x, 6)
    assert(rem == 0)
    q, rem = gmpy2.t_divmod(A+x, 4)
    assert(rem == 0)
    assert(p*q == N)
    print("the smaller factor is {}".format(p))


def part4():
    challenge = mpz("22096451867410381776306561134883418017410069787892831071731839143676135600120538004282329650473509424343946219751512256465839967942889460764542040581564748988013734864120452325229320176487916666402997509188729971690526083222067771600019329260870009579993724077458967773697817571267229951148662959627934791540")
    N = mpz('179769313486231590772930519078902473361797697894230657273430081157732675805505620686985379449212982959585501387537164015710139858647833778606925583497541085196591615128057575940752635007475935288710823649949940771895617054361149474865046711015101563940680527540071584560878577663743040086340742855278549092581')
    A = gmpy2.isqrt(N) + 1
    x = gmpy2.isqrt(A**2-N)
    p = A-x
    q = A+x
    phi_N = (p-1)*(q-1)
    e = 65537

    (gcd, coeff1, coeff2) = xgcd(e, phi_N)
    assert(gcd == 1)
    d = max(coeff1, coeff2)
    assert(gmpy2.t_divmod(d*e, phi_N)[1] == 1)
    decrypted = int(gmpy2.powmod(challenge, d, N))
    hx = hex(int(decrypted))
    print(bytes.fromhex('0'+hx[2:]))


def xgcd(a, b):
    """return (g, x, y) such that a*x + b*y = g = gcd(a, b)"""
    x0, x1, y0, y1 = 0, 1, 1, 0
    while a != 0:
        (q, a), b = divmod(b, a), a
        y0, y1 = y1, y0 - q * y1
        x0, x1 = x1, x0 - q * x1
    return b, x0, y0


part1()
part2()
part3()
part4()
